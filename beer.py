# -*- coding: utf-8 -*-
"""BEER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMhVjklrv7CGIrqeU1KHyBjhKLkWrTei
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from statsmodels.tsa.statespace.sarimax import SARIMAX
import xgboost as xgb

df = pd.read_csv("Warehouse_and_Retail_Sales.csv")
df['DATE'] = pd.to_datetime(df[['YEAR', 'MONTH']].assign(DAY=1))
monthly_sales = df.groupby(['DATE', 'ITEM TYPE'])['WAREHOUSE SALES'].sum().reset_index()

# Filter for BEER data
wine_data = monthly_sales[monthly_sales['ITEM TYPE'] == 'BEER']
wine_data = wine_data.set_index('DATE').asfreq('MS')
wine_data['WAREHOUSE SALES'] = wine_data['WAREHOUSE SALES'].fillna(0)
wine_data.rename(columns={'WAREHOUSE SALES': 'sales'}, inplace=True)

# 📈 3. Exploratory Visualization
plt.figure(figsize=(10, 4))
plt.plot(wine_data.index, wine_data['sales'], marker='o')
plt.title("Monthly BEER Warehouse Sales")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.grid(True)
plt.show()

# 🔁 4. SARIMA Forecasting (Next 6 Months)
sarima_model = SARIMAX(
    wine_data['sales'],
    order=(1, 1, 1),
    seasonal_order=(1, 1, 1, 12),
    enforce_stationarity=False,
    enforce_invertibility=False
)
sarima_results = sarima_model.fit()
sarima_forecast_steps = 6
sarima_forecast = sarima_results.get_forecast(steps=sarima_forecast_steps)
forecast_index = pd.date_range(start=wine_data.index[-1] + pd.DateOffset(months=1), periods=sarima_forecast_steps, freq='MS')
forecast_df = pd.DataFrame({'Date': forecast_index, 'Forecasted Sales': sarima_forecast.predicted_mean}).set_index('Date')

# 🚨 5. Reorder Alert System
lead_time_days = 15
avg_daily_sales = forecast_df['Forecasted Sales'].mean() / 30
safety_stock = 1.5 * avg_daily_sales * lead_time_days
available_stock = 250
reorder_df = forecast_df.copy()
reorder_df['Reorder Needed'] = reorder_df['Forecasted Sales'] > (available_stock + safety_stock)

# Alert Display
print("🔔 Reorder Alerts:")
print(reorder_df[reorder_df['Reorder Needed']])

# Alert Visualization
plt.figure(figsize=(12, 5))
plt.plot(wine_data.index, wine_data['sales'], label='Actual Sales')
plt.plot(forecast_df.index, forecast_df['Forecasted Sales'], label='Forecast', linestyle='--')
plt.scatter(reorder_df[reorder_df['Reorder Needed']].index,
            reorder_df[reorder_df['Reorder Needed']]['Forecasted Sales'],
            color='red', label='Reorder Alert', s=100, marker='x')
plt.title('BEER Sales Forecast + Reorder Alerts')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()

# 🌲 6. Random Forest & XGBoost Forecast (Next 12 Months)
wine_data_ml = wine_data.copy()
wine_data_ml['month'] = wine_data_ml.index.month
wine_data_ml['year'] = wine_data_ml.index.year
features = ['month', 'year']
train = wine_data_ml

# Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(train[features], train['sales'])

future_months = pd.date_range(start=wine_data_ml.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
future_df = pd.DataFrame({'month': future_months.month, 'year': future_months.year})
rf_predictions = rf.predict(future_df)

# Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(train[features], train['sales'])

future_months = pd.date_range(start=wine_data_ml.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
future_df = pd.DataFrame({'month': future_months.month, 'year': future_months.year})
rf_predictions = rf.predict(future_df)

# XGBoost
xgb_model = xgb.XGBRegressor(n_estimators=100, objective='reg:squarederror')
xgb_model.fit(train[features], train['sales'])
xgb_predictions = xgb_model.predict(future_df[['month', 'year']])

# 📁 7. Save Outputs
forecast_df.to_csv("wine_forecast_sarima.csv")
reorder_df.to_csv("wine_reorder_alerts.csv")
future_df['Date'] = future_months
future_df.set_index('Date', inplace=True)
future_df['RandomForest Forecast'] = rf_predictions
future_df['XGBoost Forecast'] = xgb_predictions
future_df.to_csv("wine_forecast_rf_xgb.csv")

# Combined Plot
plt.figure(figsize=(12, 5))
plt.plot(wine_data_ml.index, wine_data_ml['sales'], label='Actual')
plt.plot(future_months, rf_predictions, label='RandomForest Forecast', linestyle='--')
plt.plot(future_months, xgb_predictions, label='XGBoost Forecast', linestyle=':')
plt.title('BEER Forecast with ML Models')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()



!pip install xgboost --quiet

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import xgboost as xgb
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.model_selection import train_test_split

# Load dataset
df = pd.read_csv("Warehouse_and_Retail_Sales.csv")

# Create DATE column
df['DATE'] = pd.to_datetime(df[['YEAR', 'MONTH']].assign(DAY=1))
# Group by month and item
monthly_sales = df.groupby(['DATE', 'ITEM TYPE'])['WAREHOUSE SALES'].sum().reset_index()

# Filter WINE data
wine_data = monthly_sales[monthly_sales['ITEM TYPE'] == 'BEER']
wine_data = wine_data.set_index('DATE').asfreq('MS')
wine_data['WAREHOUSE SALES'] = wine_data['WAREHOUSE SALES'].fillna(0)
wine_data.rename(columns={'WAREHOUSE SALES': 'sales'}, inplace=True)
# Plot Actual Sales
plt.figure(figsize=(10, 4))
plt.plot(wine_data.index, wine_data['sales'], marker='o')
plt.title("Monthly BEER Warehouse Sales")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.grid(True)
plt.show()
model = SARIMAX(
    wine_data['sales'],
    order=(1, 1, 1),
    seasonal_order=(1, 1, 1, 12),
    enforce_stationarity=False,
    enforce_invertibility=False
)
results = model.fit(disp=False)
# Forecast next 6 months
forecast_steps = 6
forecast = results.get_forecast(steps=forecast_steps)
forecast_index = pd.date_range(
    start=wine_data.index[-1] + pd.DateOffset(months=1),
    periods=forecast_steps,
    freq='MS'
)
forecast_df = pd.DataFrame({
    'Date': forecast_index,
    'Forecasted Sales': forecast.predicted_mean
}).set_index('Date')
# Plot SARIMA forecast
plt.figure(figsize=(12, 5))
plt.plot(wine_data.index, wine_data['sales'], label='Actual Sales')
plt.plot(forecast_df.index, forecast_df['Forecasted Sales'], label='Forecast (SARIMA)', linestyle='--')
plt.title('BEER Sales Forecast (SARIMA)')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()
lead_time_days = 15
avg_daily_sales = forecast_df['Forecasted Sales'].mean() / 30
safety_stock = 1.5 * avg_daily_sales * lead_time_days
available_stock = 250  # hypothetical

reorder_df = forecast_df.copy()
reorder_df['Reorder Needed'] = reorder_df['Forecasted Sales'] > (available_stock + safety_stock)
plt.figure(figsize=(12, 5))
plt.plot(wine_data.index, wine_data['sales'], label='Actual Sales')
plt.plot(forecast_df.index, forecast_df['Forecasted Sales'], label='Forecast', linestyle='--')
plt.scatter(reorder_df[reorder_df['Reorder Needed']].index,
            reorder_df[reorder_df['Reorder Needed']]['Forecasted Sales'],
            color='red', label='Reorder Alert', s=100, marker='x')
plt.title('BEER Sales Forecast + Reorder Alerts')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()
print("🔔 Reorder Alerts:")
print(reorder_df[reorder_df['Reorder Needed']])

# Save CSVs
forecast_df.to_csv("wine_forecast_sarima.csv")
reorder_df.to_csv("wine_reorder_alerts.csv")
wine_data_ml = wine_data.copy()
wine_data_ml['month'] = wine_data_ml.index.month
wine_data_ml['year'] = wine_data_ml.index.year

# Features and target
features = ['month', 'year']
target = 'sales'

# Train ML models on full available data
X = wine_data_ml[features]
y = wine_data_ml[target]
# Train-test split (last 6 months for testing)
X_train, X_test = X[:-6], X[-6:]
y_train, y_test = y[:-6], y[-6:]

# ----- Random Forest -----
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
xgb_model = xgb.XGBRegressor(n_estimators=100, objective='reg:squarederror')
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

# ----- Evaluation -----
def evaluate(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    print(f"\n📊 {model_name} Evaluation:")
    print(f"MAE:  {mae:.2f}")
    print(f"RMSE: {rmse:.2f}")
    print(f"MAPE: {mape:.2f}%")
evaluate(y_test, rf_pred, "Random Forest")
evaluate(y_test, xgb_pred, "XGBoost")
evaluate(y_test, forecast_df['Forecasted Sales'].values, "SARIMA")

# ------------------ Future Forecasts ------------------
# Forecast for next 12 months
future_months = pd.date_range(start=wine_data_ml.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
future_df = pd.DataFrame({
    'month': future_months.month,
    'year': future_months.year
}, index=future_months)
# Predict
rf_future = rf.predict(future_df[['month', 'year']])
xgb_future = xgb_model.predict(future_df[['month', 'year']])

# Plot forecasts
plt.figure(figsize=(12, 5))
plt.plot(wine_data.index, wine_data['sales'], label='Actual')
plt.plot(future_months, rf_future, label='Random Forest', linestyle='--')
plt.plot(future_months, xgb_future, label='XGBoost', linestyle='--')
plt.title('BEER Sales Forecast: Random Forest vs XGBoost (Next 12 Months)')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()
# Save final forecast comparison
future_df['RandomForest Forecast'] = rf_future
future_df['XGBoost Forecast'] = xgb_future
future_df.to_csv("wine_forecast_rf_xgb.csv")